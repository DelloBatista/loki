apiVersion: v1
kind: Namespace
metadata:
  name: loki-ai
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: loki-ai
data:
  loki.toml: |
    [system]
    name = "loki-ai"
    version = "0.2.0"
    
    [cognitive]
    context_window = 128000
    orchestrator_model = "llama3.1:70b"
    
    [memory]
    persistence_path = "/data/memory"
    max_memory_gb = 16
    
    [safety]
    max_cpu_percent = 80
    rate_limit_per_minute = 60
---
apiVersion: v1
kind: Secret
metadata:
  name: loki-secrets
  namespace: loki-ai
type: Opaque
stringData:
  OPENAI_API_KEY: "your-openai-key"
  ANTHROPIC_API_KEY: "your-anthropic-key"
  GITHUB_TOKEN: "your-github-token"
  X_API_KEY: "your-x-api-key"
  X_API_SECRET: "your-x-api-secret"
  X_ACCESS_TOKEN: "your-x-access-token"
  X_ACCESS_SECRET: "your-x-access-secret"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: loki-data
  namespace: loki-ai
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: loki-models
  namespace: loki-ai
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-ai
  namespace: loki-ai
  labels:
    app: loki-ai
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki-ai
  template:
    metadata:
      labels:
        app: loki-ai
    spec:
      containers:
      - name: loki
        image: loki-ai:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8081
          name: grpc
        - containerPort: 11434
          name: ollama
        - containerPort: 9091
          name: metrics
        env:
        - name: RUST_LOG
          value: "info,loki=debug"
        - name: LOKI_DATA_DIR
          value: "/data"
        - name: LOKI_MODEL_DIR
          value: "/models"
        envFrom:
        - secretRef:
            name: loki-secrets
        volumeMounts:
        - name: data
          mountPath: /data
        - name: models
          mountPath: /models
        - name: config
          mountPath: /app/config
        resources:
          requests:
            memory: "16Gi"
            cpu: "4"
            nvidia.com/gpu: "1"  # Request 1 GPU
          limits:
            memory: "32Gi"
            cpu: "8"
            nvidia.com/gpu: "1"  # Limit to 1 GPU
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: loki-data
      - name: models
        persistentVolumeClaim:
          claimName: loki-models
      - name: config
        configMap:
          name: loki-config
---
apiVersion: v1
kind: Service
metadata:
  name: loki-ai
  namespace: loki-ai
spec:
  selector:
    app: loki-ai
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: grpc
    port: 8081
    targetPort: 8081
  - name: metrics
    port: 9091
    targetPort: 9091
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: loki-ai
  namespace: loki-ai
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - loki.example.com
    secretName: loki-tls
  rules:
  - host: loki.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: loki-ai
            port:
              number: 8080
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loki-ai
  namespace: loki-ai
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: loki-ai
  namespace: loki-ai
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: loki-ai
  namespace: loki-ai
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: loki-ai
subjects:
- kind: ServiceAccount
  name: loki-ai
  namespace: loki-ai 